%This file will document the actual coding practices that we are using, the data structures we are creating, and links to ideas or research %that we are using to build our program.

\documentclass[a4paper,11pt]{article}
\usepackage{amsmath}
\usepackage{fancyhdr}
\usepackage{graphicx}
\newcommand{\itab}[1]{\hspace{0em}\rlap{#1}}
\newcommand{\tab}[1]{\hspace{.2\textwidth}\rlap{#1}}
\usepackage[top=.6in, bottom=.8in, left=.8in, right=.8in]{geometry}
\title{3D Localization Project \\ Official Code Documentation}
\author{ \\[6.5in]  John Allard, Alex Rich \\ 2014 Summer Computer Science REU, Harvey Mudd College}
\date{July 10th, 2014}


\begin{document}

% Title Page %
  \maketitle
  
  \newpage

  % Introduction to the program, abstract, keep it short %
    \begin{abstract}
    This is the official documentation for a series of interconnected programs written at Harvey Mudd during the summer of 2014 by John Allard and Alex Rich. The purpose of these programs is to successfully localize an actor in an environment using a preloaded 3D map, precomputed computer-vision related feature data, and a live image feed from an actor in the environment. The program starts with a large amount of guesses as to where the actor could be, and uses particle filtering to converge the particles upon the correct location in the environment. Read the research paper associated with this project for more information on the mathematics and other technicalities behind Monte Carlo Localization.
    \end{abstract}
    
% Table of Contents (autogen)
    \tableofcontents
    \newpage

% === Section 1, Introduction === %
    \section{Introduction}
    Accomplishing the task of successfully locating an actor in an environment using CV-derived features and a 3D model requires many individual steps. The success 
    of the localization attempt depends strongly on the computation and data storage that is done before any attempt is made. With this in mind, we decided to subdivide the task of localizing an actor into three separate programs that must be run individually. Two of them are done before the localization attempt and are only needed to be ran once for each map that an actor is attempting to localize itself in. The 3rd program is the actual localization code that matches features to figure out where the actor is in the given map.
    
        % == Subsection 1.1, License and Info == %
       \subsection{License and Info}
       \begin{itemize}
        \item License - No license has been declared on this project, but feel free to download, modify, or distribute this code as you please.
        No warantee expressed or implied exists when you use or alter our code.
        \item Info    - This project was written by John Allard and Alex Rich at Harvey Mudd College for the 2014 Computer Science REU program.
        Our mentor was the awesome Professor Zachary Dodds, and without him this project would not have been possible to complete.
        \item Repository - The official repository for this program is \texttt{https://github.com/jhallard/3DLocalizer}. 
       \end{itemize}

        % == Subsection 1.2, prelocalization == %
        \subsection{Pre-Localization}

        \begin{enumerate}
        \item PerspectiveGenerator
            \begin{itemize}
            \item Takes a 3d model and a definition of a bounding box within the 3d map.
            \item Generates a grid within that bounding box, and makes a list of every grid intersection.
            \item Renders images from every point listed and saves them in a directory for feature processing. 
            \item Has been tested with \texttt{Wavefront .obj} model files, should work with other types of files.
            \end{itemize}
        \item DatabaseGenerator
            \begin{itemize}
            \item Generates a database of computer-vision related feature data.
            \item This feature data can range from greyscale image, black and white image, SURF/SIFT/ORB feature data and descriptors, or even images that are
            contrast tuned.
            \item This program does the majority of the work and is the reason this Localization program can run efficiently in real time, it computes mounds of data 
            and writes it all to file for future use.
            \end{itemize}
        \end{enumerate}
  
	 % == Subsection 1.3, during localization == %
        \subsection{During Localization}
        \begin{enumerate}
        \item 3DLocalization Program
            \begin{itemize}
            \item The purpose of this program is to use the data generated by the \texttt{PerspectiveGenerator} and \texttt{DatabaseGenerator} program to localize
            an actor in real-time. 
            \item Start by connecting to an actor and loading the pre-computed feature data about the environment.
            \item Generate a uniform distribution of particles over the map area, each particle represent a guess as to where the actor is.
            \item Take in a sensor reading from the robot in the form of an image. Process the image to extract feature data.
            \item Weigh the particles, generate a distribution according to the particle grouping and weighting.
            \item Sample from the distribution for new particles.
            \item Move the robot to a new location and move the particles a corresponding distance in the map.
            \item Iterate the loop from bullet 4 to 7.
            \end{itemize}
        \end{enumerate}
        \newpage

        
        
        
%==== Section 2, Perspective Generator === %
    \section{Perspective Generator}

        \subsection{Overview}
        \begin{enumerate}
        \item General Purpose - The general purpose of this program is to convert a 3D model into a processable library of images that are rendered from 
        different points in the model. This serves the purpose of allowing us to use existing 2D-Image feature detection algorithms 
        (like Sped-Up Robust Feature Detection, or Scale Invariant Feature Detection) to match a 2D image feed from an actor to a point in a 3D model.
        \item Dependencies - OpenGL 3.3, GLEW, GLUT, BOOST 1.46, OpenCV.
        \end{enumerate}
        
        \subsection{Program Flow}
	\begin{enumerate}
	 \item Before you can run the program, you must first build it by going into the \texttt{/PerspectiveGenerator/build/} directory and entering
	 \texttt{cmake ..} then \texttt{make}.
	 This will generate the \texttt{./PerspectiveGenerator} executable inside the \texttt{/PerspectiveGenerator/build/} folder. 
	 \item Put a folder containing your 3D model, \texttt{.mtl} files, and texture files into the \texttt{/3DLocalizer/Data/ModelData/} directory. 
	 \item You will then need to hand type an input file for the program. This file must contain the following, line by line.
	  \begin{itemize}
	  \item Name of the folder containing your 3D model file.
	  \item Name of the 3D model file inside the above folder.
	  \item Bounding box for your 3D model in the following format : \\ \texttt{xmin xmax ymin ymax z gridDensity dtheta}. All are floating point numbers. 
	  The z height must be constant.The gridDensity value determines the spacing between consecutive image renderings. the dTheta detemines
	  \end{itemize}
	\item From the \texttt{/PerspectiveGenerator/build/} folder, call the \texttt{./PerspectiveGenerator} executable and pass in the name of the input file as an argument.
	\item The program will take 10 seconds or so to load, when it does you will see a window with a rendering from a single point in the map. 
	\item Click anywhere on the screen and the program will automatically go through all points generated inside your map and render images to the
	  \texttt{/Data/RenderedImages/} folder
	under the same name of your folder containing the model data.
	\item When the program stops scrolling through the images (at about 20-25 per second), you can close the program.
	\end{enumerate}


        \subsection{Directory Tree}
        \begin{itemize}
        \item \texttt{/Localization/src/}
            \begin{itemize}
            \item \texttt{Helper/}
                \begin{itemize}
                \item \texttt{HelperStructures.cpp} - Contains two helper structs for rendering data.
                \item \texttt{MathHelp.h} - Contains math functionality and global state variables.
                \item \texttt{MathHelp.cpp} - Definition of functionality defined in \texttt{MathHelp.h}.
                \end{itemize}
            \item \texttt{IO/}
                \begin{itemize}
                \item \texttt{ProgramIO.h} - Declares all needed input and output for the program.\footnote{Such as error logging, debugging code, or progress statuses}
                \item \texttt{ProgramIO.cpp} - Defintition of \texttt{ProgramIO.h}.
                \end{itemize}
            \item \texttt{Main/}
                \begin{itemize}
                \item \texttt{main.cpp} - Starting points of the entire program. Initializes \texttt{OpenGL}, \texttt{GLUT}, and other dependencies.
                \end{itemize}
            \item \texttt{Rendering/}
                \begin{itemize}
                \item \texttt{Render.h} - Declares all rendering functionality. Such as taking in the Vertex Array Object and texture data, calling any necessary translation or rotation commands, then rendering the map the the screen.
                \item \texttt{Render.cpp} - Defines the functionality declared in texttt{Render.h}.
                \end{itemize}
            \item \texttt{Shaders/}
                \begin{itemize}
                \item \texttt{Shader.frag} - Fragmentation Shader file. Gets inserted into the OpenGL rendering and shading pipeline. 
                \item \texttt{Shader.vert} - Vertex Shader file. Gets inserted into the OpenGL rendering and shading pipeline.
                \item \texttt{ShaderFunctions.h} - Declares all functions related to the shaders. Like reading the shader files and loading the shaders into \texttt{OpenGL}.
                \item \texttt{ShaderFunctions.cpp} - Defines the functionality declared in texttt{ShaderFunctions.h}.
                \end{itemize}
            \item \texttt{View/}
                \begin{itemize}
                \item \texttt{View.h} - This file declares all functions related to the view matrix for the program. The view matrix determines the properties of the camera, like the field of view, near and far points, etc.
                \item \texttt{View.cpp} - Contains the definitions of all global variables and functions declared inside of the \texttt{View.h} file. 
                \end{itemize}
            \end{itemize}%end src directory
        \item \texttt{/Localization/Inputfiles/}
	    \begin{itemize} 
            \item \texttt{PointGenInput.txt} - A sample input file for the program. This file only works with the Sprague2ndFloor \texttt{.obj} file and is only left here as a concrete example of the InputFile formatting for this program.
            \end{itemize}
        \item \texttt{/Localization/ProgramDesign/}
            \begin{itemize}
            \item \texttt{InputFileFormat.txt} - The format of the input file required to run this program.
            \end{itemize}
        \item \texttt{/Localization/build/}
	    \begin{itemize}
	    \item All build files ignored, the program needs to be built on the computer it is going to be run upon.
	    \end{itemize}
        \end{itemize} % end files
        
         \subsection{Issues and Fixes}
	   \begin{enumerate}
	   \item Very Important : The .vert and .frag Shader files must have the same name before the extension. This took me like 2-3 days to figure out and I did not see it anywhere inside the documentation for OpenGL.
           \item The program will only work on more modern OpenGL version. Go to console and type \texttt{glxinfo | grep "OpenGL version"} to find out which version is currently running on your computer. If it is not 3.3 exactly, this program might not run correctly. It would be useful to fix this but it's too lengthy of a process to concentrate on currently.
           \item The 3D models are not normalized or scaled to proper real world scale. So 0.1 distance in the model might be 3 or 4 foot change in real life. So the program needs to have the \texttt{scale} variable adjusting according to each new model that the user tries to use.
         \end{enumerate}
        
        \newpage
    

        



%==== Section 3, Database Generator === %
\section{Database Generator}
  \subsection{Overview}
    \begin{enumerate}
    \item Purpose - Creates a directory full of feature data to accompany each photo created by the Perspective Generator. 
    \item Features include:
      \begin{itemize}
        \item Average Pixel Sum Image: Take original image, split into divisions, then for each grid square, take the average pixel intensity. This grayscale image is small, around 50x50.
        \item Above Below Image: Take the average intensity of the Average Pixel Sum Image. If a pixel in that image is lighter, make it white. If it's darker, make it black. This image is the same size as the Pixel Sum Image but is binary.
        \item Feature Descriptors: SURF and SIFT descriptors for extracted keypoints in each image.
      \end{itemize}
    \end{enumerate}
    
  \subsection{Program Flow}
    \begin{enumerate}
     \item 
    \end{enumerate}
    
  \subsection{Directory Tree}
    \begin{itemize}
     \item \texttt{DatabaseGenerator/src/}
       \begin{itemize}
        \item \texttt{AverageImage.h} - Contains function needed for computed features about images
        \item \texttt{CreateDB.cpp} -
        \item \texttt{Similarity.h} -
       \end{itemize}
     \item \texttt{DatabaseGenerator/build/}
       \begin{itemize}
        \item No build files will be pushed to Github
       \end{itemize}
    \end{itemize}
    
    \subsection{Issues and Fixes}
    \begin{enumerate}
      \item Needs some way to better filter keypoints.
      \item Needs to accept more diverse features.
    \end{enumerate}
    \newpage



    

%==== Section 4, 3DLocalizer === %
\section{3D Localization}

  %=== Subsection 4.1, 3DLocalization Overview ===%
  \subsection{Localization Program Overview}
  As described earlier, this program is the one that actually uses the Monte Carlo Localization (MCL) algorithm and computer-vision derived feature data to localize an actor in an environment.
  As also was described earlier, this program can only be ran after all of the pre-localization requirements have been met\footnote{For more information on these, see sections 2 and 3.}.
  \\ An abstract description of this program would be the following :
  \\ \texttt{1.) Load data necessary to localize the actor and generate guesses about the actors position.} 
  \\ \texttt{2.) Loop through the MCL algorithm until your guesses converge on a location}

  The coding goal of this program was to use practices that are generally accepted to be good\footnote{Practices like Object Oriented Programming, no jump points, proper naming conventions, and inline code documentation}.
  This means abstracting the problem of localizing a robot into a series of classes and a series of independent functions. We also had to make decisions about adding a GUI
  to the program, or which libraries we wanted to use for callback functionality. Our solutions to the problems will be documented and illustrated in the following sections.
  
  %=== Subsection 4.2, Directory Tree ===%
  \subsection{Program Flow}
  This section will only provide an overview of how the program runs and will avoid the technical details. A more detailed description of the parts of this program are discussed later in this document.
  
  \begin{enumerate}
   \item Building the program
     \begin{itemize}
       \item Ensure that you have all dependencies listed in \emph{Section 4.3, Building the Program}.
       \item Navigate to the \texttt{/Localization/build/} folder via the terminal.
       \item Enter \texttt{cmake ..} follow by \texttt{make} into the terminal to build the program.
       \item If any errors appear in the previous steps please see the \emph{Errors and Issues} section.
     \end{itemize}
   \item Starting the Program
     \begin{itemize}
       \item Ensure that your actor has its main control sequence started and that is it publishing image information via a \texttt{ROS::publisher}.
       \item Navigate to the \texttt{/Localization/build/} directory via the terminal, and type \texttt{./Localize}, this will run the programs executable.
     \end{itemize}
  \end{enumerate}
  
  
  %=== Subsection 4.3, Building the Program ===%
  \subsection{Building the Program}
  \begin{itemize}
   \item Dependencies
  \end{itemize}



   %=== Subsection 4.4, Directory Tree ===%
  \subsection{Directory Tree}
  \begin{itemize}
    \item \texttt{/Localization/src/} -
    \begin{itemize}
      \item \texttt{Boot/}
        \begin{itemize}
	  \item \texttt{Boot.h} - Loads feature data into memory and performs a `hand-shake` with the actor in the evironment.
        \end{itemize}
      \item \texttt{GUI/}
        \begin{itemize}
          \item TODO
          \item TODO
        \end{itemize}
      \item \texttt{HelperStructs/}
        \begin{itemize}
          \item \texttt{Characterizer.h} - Defines a data structure to hold different types of features associated with a certain perspective.
          \item \texttt{Perspective.h} - A data structure that defines a perspective in the enrivonment. In short, an \texttt{[x y z]} vector for position and a
          \texttt{[dx dy dz]} vector for camera orientation.
         \end{itemize}
      \item \texttt{IO/}
        \begin{itemize}
          \item \texttt{ProgramIO.h} - Declares a list of functions to allow interaction with the user via terminal messages. 
          \item \texttt{ProgramIO.cpp} - Defines the functions declared in \texttt{ProgramO.h}. 
        \end{itemize}
      \item \texttt{MCL/}
        \begin{itemize}
          \item \texttt{ActiveParticles/}
            \begin{itemize}
              \item \texttt{ActiveParticles.h} -
              \item \texttt{ActiveParticles.cpp} -
            \end{itemize}
          \item \texttt{Control/}
            \begin{itemize}
              \item \texttt{Controller.h} -
              \item \texttt{Controller.cpp} -
            \end{itemize}
          \item \texttt{Matching/}
            \begin{itemize}
              \item \texttt{Matching.h} -
            \end{itemize}
        \end{itemize}
      \item \texttt{Main/}
        \begin{itemize}
          \item \item{Main.cpp} - The official starting point of the program. Called the boot functions, initializes the Controller class, and starts the main localization loop.
        \end{itemize}
      \item \texttt{Particle/}
        \begin{itemize}
          \item \texttt{Particle.h} -
          \item \texttt{Particle.cpp} -
        \end{itemize}
      \item \texttt{Robot/}
        \begin{itemize}
          \item \texttt{RobotState.h} -
          \item \texttt{RobotState.cpp} -
          \item \texttt{RobotInit.h} -
          \item \texttt{RobotIO.h} -
        \end{itemize}
    \end{itemize}
    \item \texttt{/Localization/build/} - Where the build files and program executable will go.
    \item \texttt{/Localization/README.md} - Quick breakdown of the 3DLocalization program.
    \item \texttt{/Localization/CMakeLists.txt} - Tells CMake how to create the program and link dependencies.
  \end{itemize}

  
  
     %=== Subsection 4.4, Classes ===%
  \subsection{Classes}
  \begin{itemize}
   \item 
  \end{itemize}

  
  
       %=== Subsection 4.5, Errors and Issues ===%
  \subsection{Errors and Issues}
  \begin{enumerate}
   \item 
  \end{enumerate}

  
  
  


  

  




\end{document}